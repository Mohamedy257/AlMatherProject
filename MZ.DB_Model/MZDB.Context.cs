//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MZ.DB_Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Apartment> Apartments { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Catogery> Catogeries { get; set; }
        public virtual DbSet<CommonItem> CommonItems { get; set; }
        public virtual DbSet<CommonType> CommonTypes { get; set; }
        public virtual DbSet<Complaint> Complaints { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Tower> Towers { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Vw_Complaints> Vw_Complaints { get; set; }
        public virtual DbSet<CommonIssue> CommonIssues { get; set; }
    
        public virtual int usp_ApartmentsDelete(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ApartmentsDelete", iDParameter);
        }
    
        public virtual ObjectResult<usp_ApartmentsInsert_Result> usp_ApartmentsInsert(Nullable<decimal> iD, string name, string desc, string note, Nullable<decimal> towerID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ApartmentsInsert_Result>("usp_ApartmentsInsert", iDParameter, nameParameter, descParameter, noteParameter, towerIDParameter);
        }
    
        public virtual ObjectResult<usp_ApartmentsSelect_Result> usp_ApartmentsSelect(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ApartmentsSelect_Result>("usp_ApartmentsSelect", iDParameter);
        }
    
        public virtual ObjectResult<usp_ApartmentsUpdate_Result> usp_ApartmentsUpdate(Nullable<decimal> iD, string name, string desc, string note, Nullable<decimal> towerID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("TowerID", towerID) :
                new ObjectParameter("TowerID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ApartmentsUpdate_Result>("usp_ApartmentsUpdate", iDParameter, nameParameter, descParameter, noteParameter, towerIDParameter);
        }
    
        public virtual int usp_CatogeriesDelete(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CatogeriesDelete", iDParameter);
        }
    
        public virtual ObjectResult<usp_CatogeriesInsert_Result> usp_CatogeriesInsert(Nullable<decimal> iD, string name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CatogeriesInsert_Result>("usp_CatogeriesInsert", iDParameter, nameParameter);
        }
    
        public virtual ObjectResult<usp_CatogeriesSelect_Result> usp_CatogeriesSelect(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CatogeriesSelect_Result>("usp_CatogeriesSelect", iDParameter);
        }
    
        public virtual ObjectResult<usp_CatogeriesUpdate_Result> usp_CatogeriesUpdate(Nullable<decimal> iD, string name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CatogeriesUpdate_Result>("usp_CatogeriesUpdate", iDParameter, nameParameter);
        }
    
        public virtual int usp_CommonItemsDelete(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CommonItemsDelete", iDParameter);
        }
    
        public virtual ObjectResult<usp_CommonItemsInsert_Result> usp_CommonItemsInsert(Nullable<decimal> iD, string name, Nullable<decimal> typeId)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CommonItemsInsert_Result>("usp_CommonItemsInsert", iDParameter, nameParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<usp_CommonItemsSelect_Result> usp_CommonItemsSelect(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CommonItemsSelect_Result>("usp_CommonItemsSelect", iDParameter);
        }
    
        public virtual ObjectResult<usp_CommonItemsUpdate_Result> usp_CommonItemsUpdate(Nullable<decimal> iD, string name, Nullable<decimal> typeId)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CommonItemsUpdate_Result>("usp_CommonItemsUpdate", iDParameter, nameParameter, typeIdParameter);
        }
    
        public virtual int usp_CommonTypesDelete(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CommonTypesDelete", iDParameter);
        }
    
        public virtual ObjectResult<usp_CommonTypesInsert_Result> usp_CommonTypesInsert(Nullable<decimal> iD, string name, Nullable<decimal> catogeryID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var catogeryIDParameter = catogeryID.HasValue ?
                new ObjectParameter("CatogeryID", catogeryID) :
                new ObjectParameter("CatogeryID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CommonTypesInsert_Result>("usp_CommonTypesInsert", iDParameter, nameParameter, catogeryIDParameter);
        }
    
        public virtual ObjectResult<usp_CommonTypesSelect_Result> usp_CommonTypesSelect(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CommonTypesSelect_Result>("usp_CommonTypesSelect", iDParameter);
        }
    
        public virtual ObjectResult<usp_CommonTypesUpdate_Result> usp_CommonTypesUpdate(Nullable<decimal> iD, string name, Nullable<decimal> catogeryID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var catogeryIDParameter = catogeryID.HasValue ?
                new ObjectParameter("CatogeryID", catogeryID) :
                new ObjectParameter("CatogeryID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CommonTypesUpdate_Result>("usp_CommonTypesUpdate", iDParameter, nameParameter, catogeryIDParameter);
        }
    
        public virtual int usp_ComplaintsDelete(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ComplaintsDelete", iDParameter);
        }
    
        public virtual ObjectResult<usp_ComplaintsInsert_Result> usp_ComplaintsInsert(Nullable<decimal> apartmentId, Nullable<decimal> lvl1ID, Nullable<decimal> lVL2ID, Nullable<decimal> lVL3ID, Nullable<System.DateTime> appointmentDateTime, Nullable<System.DateTime> createDateTime, Nullable<decimal> paint, Nullable<decimal> customerId, Nullable<decimal> status, string techName, Nullable<decimal> userId, string note, string subject)
        {
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(decimal));
    
            var lvl1IDParameter = lvl1ID.HasValue ?
                new ObjectParameter("Lvl1ID", lvl1ID) :
                new ObjectParameter("Lvl1ID", typeof(decimal));
    
            var lVL2IDParameter = lVL2ID.HasValue ?
                new ObjectParameter("LVL2ID", lVL2ID) :
                new ObjectParameter("LVL2ID", typeof(decimal));
    
            var lVL3IDParameter = lVL3ID.HasValue ?
                new ObjectParameter("LVL3ID", lVL3ID) :
                new ObjectParameter("LVL3ID", typeof(decimal));
    
            var appointmentDateTimeParameter = appointmentDateTime.HasValue ?
                new ObjectParameter("AppointmentDateTime", appointmentDateTime) :
                new ObjectParameter("AppointmentDateTime", typeof(System.DateTime));
    
            var createDateTimeParameter = createDateTime.HasValue ?
                new ObjectParameter("CreateDateTime", createDateTime) :
                new ObjectParameter("CreateDateTime", typeof(System.DateTime));
    
            var paintParameter = paint.HasValue ?
                new ObjectParameter("Paint", paint) :
                new ObjectParameter("Paint", typeof(decimal));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(decimal));
    
            var techNameParameter = techName != null ?
                new ObjectParameter("TechName", techName) :
                new ObjectParameter("TechName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ComplaintsInsert_Result>("usp_ComplaintsInsert", apartmentIdParameter, lvl1IDParameter, lVL2IDParameter, lVL3IDParameter, appointmentDateTimeParameter, createDateTimeParameter, paintParameter, customerIdParameter, statusParameter, techNameParameter, userIdParameter, noteParameter, subjectParameter);
        }
    
        public virtual ObjectResult<usp_ComplaintsSelect_Result> usp_ComplaintsSelect(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ComplaintsSelect_Result>("usp_ComplaintsSelect", iDParameter);
        }
    
        public virtual ObjectResult<usp_ComplaintsUpdate_Result> usp_ComplaintsUpdate(Nullable<decimal> iD, Nullable<decimal> apartmentId, Nullable<decimal> lvl1ID, Nullable<decimal> lVL2ID, Nullable<decimal> lVL3ID, Nullable<System.DateTime> appointmentDateTime, Nullable<System.DateTime> createDateTime, Nullable<decimal> paint, Nullable<decimal> customerId, Nullable<decimal> status, string techName, Nullable<decimal> userId, string note, string subject)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(decimal));
    
            var lvl1IDParameter = lvl1ID.HasValue ?
                new ObjectParameter("Lvl1ID", lvl1ID) :
                new ObjectParameter("Lvl1ID", typeof(decimal));
    
            var lVL2IDParameter = lVL2ID.HasValue ?
                new ObjectParameter("LVL2ID", lVL2ID) :
                new ObjectParameter("LVL2ID", typeof(decimal));
    
            var lVL3IDParameter = lVL3ID.HasValue ?
                new ObjectParameter("LVL3ID", lVL3ID) :
                new ObjectParameter("LVL3ID", typeof(decimal));
    
            var appointmentDateTimeParameter = appointmentDateTime.HasValue ?
                new ObjectParameter("AppointmentDateTime", appointmentDateTime) :
                new ObjectParameter("AppointmentDateTime", typeof(System.DateTime));
    
            var createDateTimeParameter = createDateTime.HasValue ?
                new ObjectParameter("CreateDateTime", createDateTime) :
                new ObjectParameter("CreateDateTime", typeof(System.DateTime));
    
            var paintParameter = paint.HasValue ?
                new ObjectParameter("Paint", paint) :
                new ObjectParameter("Paint", typeof(decimal));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(decimal));
    
            var techNameParameter = techName != null ?
                new ObjectParameter("TechName", techName) :
                new ObjectParameter("TechName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ComplaintsUpdate_Result>("usp_ComplaintsUpdate", iDParameter, apartmentIdParameter, lvl1IDParameter, lVL2IDParameter, lVL3IDParameter, appointmentDateTimeParameter, createDateTimeParameter, paintParameter, customerIdParameter, statusParameter, techNameParameter, userIdParameter, noteParameter, subjectParameter);
        }
    
        public virtual int usp_CustomersDelete(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CustomersDelete", iDParameter);
        }
    
        public virtual ObjectResult<usp_CustomersInsert_Result> usp_CustomersInsert(Nullable<decimal> iD, string fullName, Nullable<decimal> iDType, Nullable<decimal> iDNumber, Nullable<decimal> phone, Nullable<decimal> ownershipType, Nullable<decimal> gender)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var iDTypeParameter = iDType.HasValue ?
                new ObjectParameter("IDType", iDType) :
                new ObjectParameter("IDType", typeof(decimal));
    
            var iDNumberParameter = iDNumber.HasValue ?
                new ObjectParameter("IDNumber", iDNumber) :
                new ObjectParameter("IDNumber", typeof(decimal));
    
            var phoneParameter = phone.HasValue ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(decimal));
    
            var ownershipTypeParameter = ownershipType.HasValue ?
                new ObjectParameter("OwnershipType", ownershipType) :
                new ObjectParameter("OwnershipType", typeof(decimal));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomersInsert_Result>("usp_CustomersInsert", iDParameter, fullNameParameter, iDTypeParameter, iDNumberParameter, phoneParameter, ownershipTypeParameter, genderParameter);
        }
    
        public virtual ObjectResult<usp_CustomersSelect_Result> usp_CustomersSelect(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomersSelect_Result>("usp_CustomersSelect", iDParameter);
        }
    
        public virtual ObjectResult<usp_CustomersUpdate_Result> usp_CustomersUpdate(Nullable<decimal> iD, string fullName, Nullable<decimal> iDType, Nullable<decimal> iDNumber, Nullable<decimal> phone, Nullable<decimal> ownershipType, Nullable<decimal> gender)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var iDTypeParameter = iDType.HasValue ?
                new ObjectParameter("IDType", iDType) :
                new ObjectParameter("IDType", typeof(decimal));
    
            var iDNumberParameter = iDNumber.HasValue ?
                new ObjectParameter("IDNumber", iDNumber) :
                new ObjectParameter("IDNumber", typeof(decimal));
    
            var phoneParameter = phone.HasValue ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(decimal));
    
            var ownershipTypeParameter = ownershipType.HasValue ?
                new ObjectParameter("OwnershipType", ownershipType) :
                new ObjectParameter("OwnershipType", typeof(decimal));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomersUpdate_Result>("usp_CustomersUpdate", iDParameter, fullNameParameter, iDTypeParameter, iDNumberParameter, phoneParameter, ownershipTypeParameter, genderParameter);
        }
    
        public virtual int usp_TowersDelete(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TowersDelete", iDParameter);
        }
    
        public virtual ObjectResult<usp_TowersInsert_Result> usp_TowersInsert(Nullable<decimal> iD, string name, string desc, string note)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TowersInsert_Result>("usp_TowersInsert", iDParameter, nameParameter, descParameter, noteParameter);
        }
    
        public virtual ObjectResult<usp_TowersSelect_Result> usp_TowersSelect(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TowersSelect_Result>("usp_TowersSelect", iDParameter);
        }
    
        public virtual ObjectResult<usp_TowersUpdate_Result> usp_TowersUpdate(Nullable<decimal> iD, string name, string desc, string note)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TowersUpdate_Result>("usp_TowersUpdate", iDParameter, nameParameter, descParameter, noteParameter);
        }
    
        public virtual ObjectResult<usp_CommonItemsSelectByType_Result> usp_CommonItemsSelectByType(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CommonItemsSelectByType_Result>("usp_CommonItemsSelectByType", iDParameter);
        }
    
        public virtual ObjectResult<usp_CommonTypesSelectByCatogeryByCatogery_Result> usp_CommonTypesSelectByCatogeryByCatogery(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CommonTypesSelectByCatogeryByCatogery_Result>("usp_CommonTypesSelectByCatogeryByCatogery", iDParameter);
        }
    
        public virtual ObjectResult<usp_ApartmentsSelectByTower_Result> usp_ApartmentsSelectByTower(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ApartmentsSelectByTower_Result>("usp_ApartmentsSelectByTower", iDParameter);
        }
    
        public virtual int usp_Complaints(Nullable<decimal> apartmentId)
        {
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Complaints", apartmentIdParameter);
        }
    
        public virtual ObjectResult<usp_QueryComplaints_Result> usp_QueryComplaints(Nullable<decimal> apartmentId)
        {
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueryComplaints_Result>("usp_QueryComplaints", apartmentIdParameter);
        }
    
        public virtual int usp_CommonIssuesDelete(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CommonIssuesDelete", iDParameter);
        }
    
        public virtual ObjectResult<usp_CommonIssuesInsert_Result> usp_CommonIssuesInsert(Nullable<decimal> iD, string name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CommonIssuesInsert_Result>("usp_CommonIssuesInsert", iDParameter, nameParameter);
        }
    
        public virtual ObjectResult<usp_CommonIssuesSelect_Result> usp_CommonIssuesSelect(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CommonIssuesSelect_Result>("usp_CommonIssuesSelect", iDParameter);
        }
    
        public virtual ObjectResult<usp_CommonIssuesUpdate_Result> usp_CommonIssuesUpdate(Nullable<decimal> iD, string name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CommonIssuesUpdate_Result>("usp_CommonIssuesUpdate", iDParameter, nameParameter);
        }
    
        public virtual int usp_ComplaintsDelete1(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ComplaintsDelete1", iDParameter);
        }
    
        public virtual ObjectResult<usp_ComplaintsInsert1_Result> usp_ComplaintsInsert1(Nullable<decimal> apartmentId, Nullable<decimal> lvl1ID, Nullable<decimal> lVL2ID, Nullable<decimal> lVL3ID, Nullable<System.DateTime> appointmentDateTime, Nullable<System.DateTime> createDateTime, Nullable<decimal> paint, Nullable<decimal> status, Nullable<decimal> issueId, string techName, Nullable<decimal> userId, string note, string subject, string id_Numer, string phone, string cutomer_Name, Nullable<decimal> customer_Type)
        {
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(decimal));
    
            var lvl1IDParameter = lvl1ID.HasValue ?
                new ObjectParameter("Lvl1ID", lvl1ID) :
                new ObjectParameter("Lvl1ID", typeof(decimal));
    
            var lVL2IDParameter = lVL2ID.HasValue ?
                new ObjectParameter("LVL2ID", lVL2ID) :
                new ObjectParameter("LVL2ID", typeof(decimal));
    
            var lVL3IDParameter = lVL3ID.HasValue ?
                new ObjectParameter("LVL3ID", lVL3ID) :
                new ObjectParameter("LVL3ID", typeof(decimal));
    
            var appointmentDateTimeParameter = appointmentDateTime.HasValue ?
                new ObjectParameter("AppointmentDateTime", appointmentDateTime) :
                new ObjectParameter("AppointmentDateTime", typeof(System.DateTime));
    
            var createDateTimeParameter = createDateTime.HasValue ?
                new ObjectParameter("CreateDateTime", createDateTime) :
                new ObjectParameter("CreateDateTime", typeof(System.DateTime));
    
            var paintParameter = paint.HasValue ?
                new ObjectParameter("Paint", paint) :
                new ObjectParameter("Paint", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(decimal));
    
            var issueIdParameter = issueId.HasValue ?
                new ObjectParameter("IssueId", issueId) :
                new ObjectParameter("IssueId", typeof(decimal));
    
            var techNameParameter = techName != null ?
                new ObjectParameter("TechName", techName) :
                new ObjectParameter("TechName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var id_NumerParameter = id_Numer != null ?
                new ObjectParameter("Id_Numer", id_Numer) :
                new ObjectParameter("Id_Numer", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var cutomer_NameParameter = cutomer_Name != null ?
                new ObjectParameter("Cutomer_Name", cutomer_Name) :
                new ObjectParameter("Cutomer_Name", typeof(string));
    
            var customer_TypeParameter = customer_Type.HasValue ?
                new ObjectParameter("Customer_Type", customer_Type) :
                new ObjectParameter("Customer_Type", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ComplaintsInsert1_Result>("usp_ComplaintsInsert1", apartmentIdParameter, lvl1IDParameter, lVL2IDParameter, lVL3IDParameter, appointmentDateTimeParameter, createDateTimeParameter, paintParameter, statusParameter, issueIdParameter, techNameParameter, userIdParameter, noteParameter, subjectParameter, id_NumerParameter, phoneParameter, cutomer_NameParameter, customer_TypeParameter);
        }
    
        public virtual ObjectResult<usp_ComplaintsSelect1_Result> usp_ComplaintsSelect1(Nullable<decimal> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ComplaintsSelect1_Result>("usp_ComplaintsSelect1", iDParameter);
        }
    
        public virtual ObjectResult<usp_ComplaintsUpdate1_Result> usp_ComplaintsUpdate1(Nullable<decimal> iD, Nullable<decimal> apartmentId, Nullable<decimal> lvl1ID, Nullable<decimal> lVL2ID, Nullable<decimal> lVL3ID, Nullable<System.DateTime> appointmentDateTime, Nullable<System.DateTime> createDateTime, Nullable<decimal> paint, Nullable<decimal> status, Nullable<decimal> issueId, string techName, Nullable<decimal> userId, string note, string subject, string id_Numer, string phone, string cutomer_Name, Nullable<decimal> customer_Type)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(decimal));
    
            var lvl1IDParameter = lvl1ID.HasValue ?
                new ObjectParameter("Lvl1ID", lvl1ID) :
                new ObjectParameter("Lvl1ID", typeof(decimal));
    
            var lVL2IDParameter = lVL2ID.HasValue ?
                new ObjectParameter("LVL2ID", lVL2ID) :
                new ObjectParameter("LVL2ID", typeof(decimal));
    
            var lVL3IDParameter = lVL3ID.HasValue ?
                new ObjectParameter("LVL3ID", lVL3ID) :
                new ObjectParameter("LVL3ID", typeof(decimal));
    
            var appointmentDateTimeParameter = appointmentDateTime.HasValue ?
                new ObjectParameter("AppointmentDateTime", appointmentDateTime) :
                new ObjectParameter("AppointmentDateTime", typeof(System.DateTime));
    
            var createDateTimeParameter = createDateTime.HasValue ?
                new ObjectParameter("CreateDateTime", createDateTime) :
                new ObjectParameter("CreateDateTime", typeof(System.DateTime));
    
            var paintParameter = paint.HasValue ?
                new ObjectParameter("Paint", paint) :
                new ObjectParameter("Paint", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(decimal));
    
            var issueIdParameter = issueId.HasValue ?
                new ObjectParameter("IssueId", issueId) :
                new ObjectParameter("IssueId", typeof(decimal));
    
            var techNameParameter = techName != null ?
                new ObjectParameter("TechName", techName) :
                new ObjectParameter("TechName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var id_NumerParameter = id_Numer != null ?
                new ObjectParameter("Id_Numer", id_Numer) :
                new ObjectParameter("Id_Numer", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var cutomer_NameParameter = cutomer_Name != null ?
                new ObjectParameter("Cutomer_Name", cutomer_Name) :
                new ObjectParameter("Cutomer_Name", typeof(string));
    
            var customer_TypeParameter = customer_Type.HasValue ?
                new ObjectParameter("Customer_Type", customer_Type) :
                new ObjectParameter("Customer_Type", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ComplaintsUpdate1_Result>("usp_ComplaintsUpdate1", iDParameter, apartmentIdParameter, lvl1IDParameter, lVL2IDParameter, lVL3IDParameter, appointmentDateTimeParameter, createDateTimeParameter, paintParameter, statusParameter, issueIdParameter, techNameParameter, userIdParameter, noteParameter, subjectParameter, id_NumerParameter, phoneParameter, cutomer_NameParameter, customer_TypeParameter);
        }
    }
}
